#!/usr/bin/env python3

import argparse,csv

def pad_col(col, max_width):
    return col.ljust(max_width)

def check_empty(row):
    return not ((row[4] == '') or (row[5] == '') or (row[6] == '') or (row[7] == ''))

parser = argparse.ArgumentParser()
parser.add_argument('inputFile1')
parser.add_argument('inputFile2')
parser.add_argument('outputFilename')
args = parser.parse_args()

instances = {}
states = {}
times = {}
with open(args.inputFile1, 'r') as csvfile:
    reader = csv.reader(csvfile)
    firstLine = True
    robustSecond = 2 # true
    for row in reader:
        if firstLine:
            if "robust" in row[4]:
                robustSecond = 0 # false
            firstLine = False
        elif check_empty(row):
            key = (re.sub(r'\d+', '', row[0]), row[1])
            instances[key] = instances.setdefault(key, 0) + 1
            states[key] = states.setdefault(key, 0) + ((float(row[4 + robustSecond]) - float(row[6 - robustSecond]))/float(row[6 - robustSecond]))
            times[key] = times.setdefault(key, 0) + ((float(row[5 + robustSecond]) - float(row[7 - robustSecond]))/float(row[7 - robustSecond]))
        else:
            print('Warning: the benchmark ' + row[0] + ' (' + row[1] + ') is missing some information in row ' + row[2] + '.')

with open(args.inputFile2, 'r') as csvfile:
    reader = csv.reader(csvfile)
    firstLine = True
    robustSecond = 2 # true
    for row in reader:
        if firstLine:
            if "robust" in row[4]:
                robustSecond = 0 # false
            firstLine = False
        elif check_empty(row):
            key = (re.sub(r'\d+', '', row[0]), row[1])
            instances[key] = instances.setdefault(key, 0) + 1
            states[key] = states.setdefault(key, 0) + ((float(row[4 + robustSecond]) - float(row[6 - robustSecond]))/float(row[6 - robustSecond]))
            times[key] = times.setdefault(key, 0) + ((float(row[5 + robustSecond]) - float(row[7 - robustSecond]))/float(row[7 - robustSecond]))
        else:
            print('Warning: the benchmark ' + row[0] + ' (' + row[1] + ') is missing some information in row ' + row[2] + '.')

summary = []
summary.append(["model", "property", "instances", "% inc states", "% inc time"])
for key, value in instances.items():
    row = list(key) + [str(value)] + [f'{(100*states[key])/value:.2f}'] + [f'{(100*times[key])/value:.2f}']
    summary.append(row)

max_col_width = [0] * len(summary[0])
for row in summary:
    for idx, col in enumerate(row):
        max_col_width[idx] = max(len(col), max_col_width[idx])

with open(args.outputFilename, 'w') as f:
    for row in summary:
        to_print = ""
        for idx, col in enumerate(row):
            to_print += pad_col(col, max_col_width[idx]) + " | "
        f.write(to_print + "\n")

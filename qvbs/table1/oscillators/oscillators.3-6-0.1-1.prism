//==============================================================================
// file generated on 25-08-2018 at 19-30-20
// 
// model name: mirollo-strogatz
//==============================================================================
dtmc

//------------------------------------------------------------------------------
// encoded structural parameters
// 
// N       = 3
// T       = 6
// EPSILON = 0.1
// RP      = 1
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// broadcast failure probability
//------------------------------------------------------------------------------
const double mu;

//------------------------------------------------------------------------------
// Desired level of synchrony (value 1 means that all oscillators are perfectly synchronised)
//------------------------------------------------------------------------------
const double lambda;


formula unit_vector_x_avg_squared = pow((((unit_vector_x_1 * k_1) + (unit_vector_x_2 * k_2) + (unit_vector_x_3 * k_3) + (unit_vector_x_4 * k_4) + (unit_vector_x_5 * k_5) + (unit_vector_x_6 * k_6)) / 3), 2);
formula unit_vector_y_avg_squared = pow((((unit_vector_y_1 * k_1) + (unit_vector_y_2 * k_2) + (unit_vector_y_3 * k_3) + (unit_vector_y_4 * k_4) + (unit_vector_y_5 * k_5) + (unit_vector_y_6 * k_6)) / 3), 2);
formula order_parameter = pow(unit_vector_x_avg_squared + unit_vector_y_avg_squared, 0.5);

//------------------------------------------------------------------------------
// the total number of oscillators at any given time
//------------------------------------------------------------------------------
formula num_oscillators = k_1 + k_2 + k_3 + k_4 + k_5 + k_6;

//------------------------------------------------------------------------------
// true after all oscillators have been assigned phases
//------------------------------------------------------------------------------
formula assigned = num_oscillators = 3;

//------------------------------------------------------------------------------
// true if all oscillators have the same phase
//------------------------------------------------------------------------------
formula synchronised = k_1 = 3 | k_2 = 3 | k_3 = 3 | k_4 = 3 | k_5 = 3 | k_6 = 3;

//------------------------------------------------------------------------------
// message loss probabilities
//------------------------------------------------------------------------------
formula pr_fail_0_0 = 1;
formula pr_fail_1_0 = (pow(mu, 0) * pow(1 - mu, 1) * 1.0);
formula pr_fail_1_1 = (pow(mu, 1) * pow(1 - mu, 0) * 1.0);
formula pr_fail_2_0 = (pow(mu, 0) * pow(1 - mu, 2) * 1.0);
formula pr_fail_2_1 = (pow(mu, 1) * pow(1 - mu, 1) * 2.0);
formula pr_fail_2_2 = (pow(mu, 2) * pow(1 - mu, 0) * 1.0);
formula pr_fail_3_0 = (pow(mu, 0) * pow(1 - mu, 3) * 1.0);
formula pr_fail_3_1 = (pow(mu, 1) * pow(1 - mu, 2) * 3.0);
formula pr_fail_3_2 = (pow(mu, 2) * pow(1 - mu, 1) * 3.0);
formula pr_fail_3_3 = (pow(mu, 3) * pow(1 - mu, 0) * 1.0);



//------------------------------------------------------------------------------
// time taken to achieve synchronisation
//------------------------------------------------------------------------------
rewards "time_to_synch"
	assigned & (k_6 > 0) & (!synchronised) : 1 / 6;
	assigned & (k_6 = 0 & k_1 > 0 & k_2 = 0 & k_3 = 0 & k_4 = 0 & k_5 = 0) & (!synchronised) : 5 / 6;
	assigned & (k_6 = 0 & k_2 > 0 & k_3 = 0 & k_4 = 0 & k_5 = 0) & (!synchronised) : 4 / 6;
	assigned & (k_6 = 0 & k_3 > 0 & k_4 = 0 & k_5 = 0) & (!synchronised) : 3 / 6;
	assigned & (k_6 = 0 & k_4 > 0 & k_5 = 0) & (!synchronised) : 2 / 6;
	assigned & (k_6 = 0 & k_5 > 0) & (!synchronised) : 1 / 6;
endrewards

//------------------------------------------------------------------------------
// power consumption in watt hours
//------------------------------------------------------------------------------
rewards "power_consumption"
	assigned & (k_6 > 0) :
		(k_1 * 0.0000002778)
		+ ((k_1) * 0.0000000278)
		+ ((k_5 + k_4 + k_3 + k_2) * 0.0000273611);
	assigned & (k_6 = 0 & k_1 > 0 & k_2 = 0 & k_3 = 0 & k_4 = 0 & k_5 = 0) : 
		(k_1 * 0.0000002778)
		+ (((1 * k_1)) * 0.0000000278)
		+ (((4 * k_1)) * 0.0000273611);
	assigned & (k_6 = 0 & k_2 > 0 & k_3 = 0 & k_4 = 0 & k_5 = 0) : 
		(k_1 * 0.0000002778)
		+ (((1 * k_1) + (0 * k_2)) * 0.0000000278)
		+ (((3 * k_1) + (4 * k_2)) * 0.0000273611);
	assigned & (k_6 = 0 & k_3 > 0 & k_4 = 0 & k_5 = 0) : 
		(k_1 * 0.0000002778)
		+ (((1 * k_1) + (0 * k_2) + (0 * k_3)) * 0.0000000278)
		+ (((2 * k_1) + (3 * k_2) + (3 * k_3)) * 0.0000273611);
	assigned & (k_6 = 0 & k_4 > 0 & k_5 = 0) : 
		(k_1 * 0.0000002778)
		+ (((1 * k_1) + (0 * k_2) + (0 * k_3) + (0 * k_4)) * 0.0000000278)
		+ (((1 * k_1) + (2 * k_2) + (2 * k_3) + (2 * k_4)) * 0.0000273611);
	assigned & (k_6 = 0 & k_5 > 0) : 
		(k_1 * 0.0000002778)
		+ (((1 * k_1) + (0 * k_2) + (0 * k_3) + (0 * k_4) + (0 * k_5)) * 0.0000000278)
		+ (((0 * k_1) + (1 * k_2) + (1 * k_3) + (1 * k_4) + (1 * k_5)) * 0.0000273611);
endrewards

//------------------------------------------------------------------------------
// order parameter
//------------------------------------------------------------------------------
const double unit_vector_x_1 = 1.000000000000; 
const double unit_vector_y_1 = 0.000000000000;
const double unit_vector_x_2 = 0.500000000000; 
const double unit_vector_y_2 = 0.866025403784;
const double unit_vector_x_3 = -0.500000000000; 
const double unit_vector_y_3 = 0.866025403784;
const double unit_vector_x_4 = -1.000000000000; 
const double unit_vector_y_4 = 0.000000000000;
const double unit_vector_x_5 = -0.500000000000; 
const double unit_vector_y_5 = -0.866025403784;
const double unit_vector_x_6 = 0.500000000000; 
const double unit_vector_y_6 = -0.866025403784;

module oscillator_population
	//------------------------------------------------------------------------------
	// global state encoding
	//------------------------------------------------------------------------------
	k_1 : [0..3] init 0;
	k_2 : [0..3] init 0;
	k_3 : [0..3] init 0;
	k_4 : [0..3] init 0;
	k_5 : [0..3] init 0;
	k_6 : [0..3] init 0;

	//------------------------------------------------------------------------------
	// initial transitions to configured global states
	//------------------------------------------------------------------------------
	[step] (!assigned) ->
		(1 / pow(6, 3)): (k_1' = 0) & (k_2' = 0) & (k_3' = 0) & (k_4' = 0) & (k_5' = 0) & (k_6' = 3) +
		(3 / pow(6, 3)): (k_1' = 0) & (k_2' = 0) & (k_3' = 0) & (k_4' = 0) & (k_5' = 1) & (k_6' = 2) +
		(3 / pow(6, 3)): (k_1' = 0) & (k_2' = 0) & (k_3' = 0) & (k_4' = 0) & (k_5' = 2) & (k_6' = 1) +
		(1 / pow(6, 3)): (k_1' = 0) & (k_2' = 0) & (k_3' = 0) & (k_4' = 0) & (k_5' = 3) & (k_6' = 0) +
		(3 / pow(6, 3)): (k_1' = 0) & (k_2' = 0) & (k_3' = 0) & (k_4' = 1) & (k_5' = 0) & (k_6' = 2) +
		(6 / pow(6, 3)): (k_1' = 0) & (k_2' = 0) & (k_3' = 0) & (k_4' = 1) & (k_5' = 1) & (k_6' = 1) +
		(3 / pow(6, 3)): (k_1' = 0) & (k_2' = 0) & (k_3' = 0) & (k_4' = 1) & (k_5' = 2) & (k_6' = 0) +
		(3 / pow(6, 3)): (k_1' = 0) & (k_2' = 0) & (k_3' = 0) & (k_4' = 2) & (k_5' = 0) & (k_6' = 1) +
		(3 / pow(6, 3)): (k_1' = 0) & (k_2' = 0) & (k_3' = 0) & (k_4' = 2) & (k_5' = 1) & (k_6' = 0) +
		(1 / pow(6, 3)): (k_1' = 0) & (k_2' = 0) & (k_3' = 0) & (k_4' = 3) & (k_5' = 0) & (k_6' = 0) +
		(3 / pow(6, 3)): (k_1' = 0) & (k_2' = 0) & (k_3' = 1) & (k_4' = 0) & (k_5' = 0) & (k_6' = 2) +
		(6 / pow(6, 3)): (k_1' = 0) & (k_2' = 0) & (k_3' = 1) & (k_4' = 0) & (k_5' = 1) & (k_6' = 1) +
		(3 / pow(6, 3)): (k_1' = 0) & (k_2' = 0) & (k_3' = 1) & (k_4' = 0) & (k_5' = 2) & (k_6' = 0) +
		(6 / pow(6, 3)): (k_1' = 0) & (k_2' = 0) & (k_3' = 1) & (k_4' = 1) & (k_5' = 0) & (k_6' = 1) +
		(6 / pow(6, 3)): (k_1' = 0) & (k_2' = 0) & (k_3' = 1) & (k_4' = 1) & (k_5' = 1) & (k_6' = 0) +
		(3 / pow(6, 3)): (k_1' = 0) & (k_2' = 0) & (k_3' = 1) & (k_4' = 2) & (k_5' = 0) & (k_6' = 0) +
		(3 / pow(6, 3)): (k_1' = 0) & (k_2' = 0) & (k_3' = 2) & (k_4' = 0) & (k_5' = 0) & (k_6' = 1) +
		(3 / pow(6, 3)): (k_1' = 0) & (k_2' = 0) & (k_3' = 2) & (k_4' = 0) & (k_5' = 1) & (k_6' = 0) +
		(3 / pow(6, 3)): (k_1' = 0) & (k_2' = 0) & (k_3' = 2) & (k_4' = 1) & (k_5' = 0) & (k_6' = 0) +
		(1 / pow(6, 3)): (k_1' = 0) & (k_2' = 0) & (k_3' = 3) & (k_4' = 0) & (k_5' = 0) & (k_6' = 0) +
		(3 / pow(6, 3)): (k_1' = 0) & (k_2' = 1) & (k_3' = 0) & (k_4' = 0) & (k_5' = 0) & (k_6' = 2) +
		(6 / pow(6, 3)): (k_1' = 0) & (k_2' = 1) & (k_3' = 0) & (k_4' = 0) & (k_5' = 1) & (k_6' = 1) +
		(3 / pow(6, 3)): (k_1' = 0) & (k_2' = 1) & (k_3' = 0) & (k_4' = 0) & (k_5' = 2) & (k_6' = 0) +
		(6 / pow(6, 3)): (k_1' = 0) & (k_2' = 1) & (k_3' = 0) & (k_4' = 1) & (k_5' = 0) & (k_6' = 1) +
		(6 / pow(6, 3)): (k_1' = 0) & (k_2' = 1) & (k_3' = 0) & (k_4' = 1) & (k_5' = 1) & (k_6' = 0) +
		(3 / pow(6, 3)): (k_1' = 0) & (k_2' = 1) & (k_3' = 0) & (k_4' = 2) & (k_5' = 0) & (k_6' = 0) +
		(6 / pow(6, 3)): (k_1' = 0) & (k_2' = 1) & (k_3' = 1) & (k_4' = 0) & (k_5' = 0) & (k_6' = 1) +
		(6 / pow(6, 3)): (k_1' = 0) & (k_2' = 1) & (k_3' = 1) & (k_4' = 0) & (k_5' = 1) & (k_6' = 0) +
		(6 / pow(6, 3)): (k_1' = 0) & (k_2' = 1) & (k_3' = 1) & (k_4' = 1) & (k_5' = 0) & (k_6' = 0) +
		(3 / pow(6, 3)): (k_1' = 0) & (k_2' = 1) & (k_3' = 2) & (k_4' = 0) & (k_5' = 0) & (k_6' = 0) +
		(3 / pow(6, 3)): (k_1' = 0) & (k_2' = 2) & (k_3' = 0) & (k_4' = 0) & (k_5' = 0) & (k_6' = 1) +
		(3 / pow(6, 3)): (k_1' = 0) & (k_2' = 2) & (k_3' = 0) & (k_4' = 0) & (k_5' = 1) & (k_6' = 0) +
		(3 / pow(6, 3)): (k_1' = 0) & (k_2' = 2) & (k_3' = 0) & (k_4' = 1) & (k_5' = 0) & (k_6' = 0) +
		(3 / pow(6, 3)): (k_1' = 0) & (k_2' = 2) & (k_3' = 1) & (k_4' = 0) & (k_5' = 0) & (k_6' = 0) +
		(1 / pow(6, 3)): (k_1' = 0) & (k_2' = 3) & (k_3' = 0) & (k_4' = 0) & (k_5' = 0) & (k_6' = 0) +
		(3 / pow(6, 3)): (k_1' = 1) & (k_2' = 0) & (k_3' = 0) & (k_4' = 0) & (k_5' = 0) & (k_6' = 2) +
		(6 / pow(6, 3)): (k_1' = 1) & (k_2' = 0) & (k_3' = 0) & (k_4' = 0) & (k_5' = 1) & (k_6' = 1) +
		(3 / pow(6, 3)): (k_1' = 1) & (k_2' = 0) & (k_3' = 0) & (k_4' = 0) & (k_5' = 2) & (k_6' = 0) +
		(6 / pow(6, 3)): (k_1' = 1) & (k_2' = 0) & (k_3' = 0) & (k_4' = 1) & (k_5' = 0) & (k_6' = 1) +
		(6 / pow(6, 3)): (k_1' = 1) & (k_2' = 0) & (k_3' = 0) & (k_4' = 1) & (k_5' = 1) & (k_6' = 0) +
		(3 / pow(6, 3)): (k_1' = 1) & (k_2' = 0) & (k_3' = 0) & (k_4' = 2) & (k_5' = 0) & (k_6' = 0) +
		(6 / pow(6, 3)): (k_1' = 1) & (k_2' = 0) & (k_3' = 1) & (k_4' = 0) & (k_5' = 0) & (k_6' = 1) +
		(6 / pow(6, 3)): (k_1' = 1) & (k_2' = 0) & (k_3' = 1) & (k_4' = 0) & (k_5' = 1) & (k_6' = 0) +
		(6 / pow(6, 3)): (k_1' = 1) & (k_2' = 0) & (k_3' = 1) & (k_4' = 1) & (k_5' = 0) & (k_6' = 0) +
		(3 / pow(6, 3)): (k_1' = 1) & (k_2' = 0) & (k_3' = 2) & (k_4' = 0) & (k_5' = 0) & (k_6' = 0) +
		(6 / pow(6, 3)): (k_1' = 1) & (k_2' = 1) & (k_3' = 0) & (k_4' = 0) & (k_5' = 0) & (k_6' = 1) +
		(6 / pow(6, 3)): (k_1' = 1) & (k_2' = 1) & (k_3' = 0) & (k_4' = 0) & (k_5' = 1) & (k_6' = 0) +
		(6 / pow(6, 3)): (k_1' = 1) & (k_2' = 1) & (k_3' = 0) & (k_4' = 1) & (k_5' = 0) & (k_6' = 0) +
		(6 / pow(6, 3)): (k_1' = 1) & (k_2' = 1) & (k_3' = 1) & (k_4' = 0) & (k_5' = 0) & (k_6' = 0) +
		(3 / pow(6, 3)): (k_1' = 1) & (k_2' = 2) & (k_3' = 0) & (k_4' = 0) & (k_5' = 0) & (k_6' = 0) +
		(3 / pow(6, 3)): (k_1' = 2) & (k_2' = 0) & (k_3' = 0) & (k_4' = 0) & (k_5' = 0) & (k_6' = 1) +
		(3 / pow(6, 3)): (k_1' = 2) & (k_2' = 0) & (k_3' = 0) & (k_4' = 0) & (k_5' = 1) & (k_6' = 0) +
		(3 / pow(6, 3)): (k_1' = 2) & (k_2' = 0) & (k_3' = 0) & (k_4' = 1) & (k_5' = 0) & (k_6' = 0) +
		(3 / pow(6, 3)): (k_1' = 2) & (k_2' = 0) & (k_3' = 1) & (k_4' = 0) & (k_5' = 0) & (k_6' = 0) +
		(3 / pow(6, 3)): (k_1' = 2) & (k_2' = 1) & (k_3' = 0) & (k_4' = 0) & (k_5' = 0) & (k_6' = 0) +
		(1 / pow(6, 3)): (k_1' = 3) & (k_2' = 0) & (k_3' = 0) & (k_4' = 0) & (k_5' = 0) & (k_6' = 0);

	//------------------------------------------------------------------------------
	// update oscillator phases, no firing
	//------------------------------------------------------------------------------
	[step] (assigned & k_6 = 0 & k_1 > 0 & k_2 = 0 & k_3 = 0 & k_4 = 0 & k_5 = 0) -> (k_1' = 0) & (k_2' = 0) & (k_3' = 0) & (k_4' = 0) & (k_5' = 0) & (k_6' = k_1);
	[step] (assigned & k_6 = 0 & k_2 > 0 & k_3 = 0 & k_4 = 0 & k_5 = 0) -> (k_1' = 0) & (k_2' = 0) & (k_3' = 0) & (k_4' = 0) & (k_5' = k_1) & (k_6' = k_2);
	[step] (assigned & k_6 = 0 & k_3 > 0 & k_4 = 0 & k_5 = 0) -> (k_1' = 0) & (k_2' = 0) & (k_3' = 0) & (k_4' = k_1) & (k_5' = k_2) & (k_6' = k_3);
	[step] (assigned & k_6 = 0 & k_4 > 0 & k_5 = 0) -> (k_1' = 0) & (k_2' = 0) & (k_3' = k_1) & (k_4' = k_2) & (k_5' = k_3) & (k_6' = k_4);
	[step] (assigned & k_6 = 0 & k_5 > 0) -> (k_1' = 0) & (k_2' = k_1) & (k_3' = k_2) & (k_4' = k_3) & (k_5' = k_4) & (k_6' = k_5);

	//------------------------------------------------------------------------------
	// update oscillator phases, firing
	//------------------------------------------------------------------------------
	[step] (assigned & k_1 = 0 & k_2 = 0 & k_3 = 0 & k_4 = 0 & k_5 = 0 & k_6 = 3) ->
			(k_1' = 3) & (k_2' = 0) & (k_3' = 0) & (k_4' = 0) & (k_5' = 0) & (k_6' = 0);
	[step] (assigned & k_1 = 0 & k_2 = 0 & k_3 = 0 & k_4 = 0 & k_5 = 1 & k_6 = 2) ->
		((pr_fail_1_0 * pr_fail_2_0) + (pr_fail_1_1 * pr_fail_2_0) + (pr_fail_1_0 * pr_fail_2_1) + (pr_fail_1_1 * pr_fail_2_1)):
			(k_1' = 3) & (k_2' = 0) & (k_3' = 0) & (k_4' = 0) & (k_5' = 0) & (k_6' = 0) +
		((pr_fail_2_2)):
			(k_1' = 2) & (k_2' = 0) & (k_3' = 0) & (k_4' = 0) & (k_5' = 0) & (k_6' = 1);
	[step] (assigned & k_1 = 0 & k_2 = 0 & k_3 = 0 & k_4 = 0 & k_5 = 2 & k_6 = 1) ->
		((pr_fail_2_0 * pr_fail_1_0) + (pr_fail_2_1 * pr_fail_1_0) + (pr_fail_2_2 * pr_fail_1_0)):
			(k_1' = 3) & (k_2' = 0) & (k_3' = 0) & (k_4' = 0) & (k_5' = 0) & (k_6' = 0) +
		((pr_fail_1_1)):
			(k_1' = 1) & (k_2' = 0) & (k_3' = 0) & (k_4' = 0) & (k_5' = 0) & (k_6' = 2);
	[step] (assigned & k_1 = 0 & k_2 = 0 & k_3 = 0 & k_4 = 1 & k_5 = 0 & k_6 = 2) ->
		((pr_fail_0_0 * pr_fail_2_0)):
			(k_1' = 2) & (k_2' = 0) & (k_3' = 0) & (k_4' = 0) & (k_5' = 0) & (k_6' = 1) +
		((pr_fail_0_0 * pr_fail_2_1) + (pr_fail_2_2)):
			(k_1' = 2) & (k_2' = 0) & (k_3' = 0) & (k_4' = 0) & (k_5' = 1) & (k_6' = 0);
	[step] (assigned & k_1 = 0 & k_2 = 0 & k_3 = 0 & k_4 = 1 & k_5 = 1 & k_6 = 1) ->
		((pr_fail_1_0 * pr_fail_1_0)):
			(k_1' = 2) & (k_2' = 0) & (k_3' = 0) & (k_4' = 0) & (k_5' = 0) & (k_6' = 1) +
		((pr_fail_1_1 * pr_fail_1_0)):
			(k_1' = 2) & (k_2' = 0) & (k_3' = 0) & (k_4' = 0) & (k_5' = 1) & (k_6' = 0) +
		((pr_fail_1_1)):
			(k_1' = 1) & (k_2' = 0) & (k_3' = 0) & (k_4' = 0) & (k_5' = 1) & (k_6' = 1);
	[step] (assigned & k_1 = 0 & k_2 = 0 & k_3 = 0 & k_4 = 2 & k_5 = 0 & k_6 = 1) ->
			(k_1' = 1) & (k_2' = 0) & (k_3' = 0) & (k_4' = 0) & (k_5' = 2) & (k_6' = 0);
	[step] (assigned & k_1 = 0 & k_2 = 0 & k_3 = 1 & k_4 = 0 & k_5 = 0 & k_6 = 2) ->
		((pr_fail_0_0 * pr_fail_2_0)):
			(k_1' = 2) & (k_2' = 0) & (k_3' = 0) & (k_4' = 0) & (k_5' = 1) & (k_6' = 0) +
		((pr_fail_0_0 * pr_fail_2_1) + (pr_fail_2_2)):
			(k_1' = 2) & (k_2' = 0) & (k_3' = 0) & (k_4' = 1) & (k_5' = 0) & (k_6' = 0);
	[step] (assigned & k_1 = 0 & k_2 = 0 & k_3 = 1 & k_4 = 0 & k_5 = 1 & k_6 = 1) ->
		((pr_fail_1_0 * pr_fail_1_0)):
			(k_1' = 2) & (k_2' = 0) & (k_3' = 0) & (k_4' = 0) & (k_5' = 1) & (k_6' = 0) +
		((pr_fail_1_1 * pr_fail_1_0)):
			(k_1' = 2) & (k_2' = 0) & (k_3' = 0) & (k_4' = 1) & (k_5' = 0) & (k_6' = 0) +
		((pr_fail_1_1)):
			(k_1' = 1) & (k_2' = 0) & (k_3' = 0) & (k_4' = 1) & (k_5' = 0) & (k_6' = 1);
	[step] (assigned & k_1 = 0 & k_2 = 0 & k_3 = 1 & k_4 = 1 & k_5 = 0 & k_6 = 1) ->
			(k_1' = 1) & (k_2' = 0) & (k_3' = 0) & (k_4' = 1) & (k_5' = 1) & (k_6' = 0);
	[step] (assigned & k_1 = 0 & k_2 = 0 & k_3 = 2 & k_4 = 0 & k_5 = 0 & k_6 = 1) ->
			(k_1' = 1) & (k_2' = 0) & (k_3' = 0) & (k_4' = 2) & (k_5' = 0) & (k_6' = 0);
	[step] (assigned & k_1 = 0 & k_2 = 1 & k_3 = 0 & k_4 = 0 & k_5 = 0 & k_6 = 2) ->
			(k_1' = 2) & (k_2' = 0) & (k_3' = 1) & (k_4' = 0) & (k_5' = 0) & (k_6' = 0);
	[step] (assigned & k_1 = 0 & k_2 = 1 & k_3 = 0 & k_4 = 0 & k_5 = 1 & k_6 = 1) ->
		((pr_fail_1_0 * pr_fail_1_0) + (pr_fail_1_1 * pr_fail_1_0)):
			(k_1' = 2) & (k_2' = 0) & (k_3' = 1) & (k_4' = 0) & (k_5' = 0) & (k_6' = 0) +
		((pr_fail_1_1)):
			(k_1' = 1) & (k_2' = 0) & (k_3' = 1) & (k_4' = 0) & (k_5' = 0) & (k_6' = 1);
	[step] (assigned & k_1 = 0 & k_2 = 1 & k_3 = 0 & k_4 = 1 & k_5 = 0 & k_6 = 1) ->
			(k_1' = 1) & (k_2' = 0) & (k_3' = 1) & (k_4' = 0) & (k_5' = 1) & (k_6' = 0);
	[step] (assigned & k_1 = 0 & k_2 = 1 & k_3 = 1 & k_4 = 0 & k_5 = 0 & k_6 = 1) ->
			(k_1' = 1) & (k_2' = 0) & (k_3' = 1) & (k_4' = 1) & (k_5' = 0) & (k_6' = 0);
	[step] (assigned & k_1 = 0 & k_2 = 2 & k_3 = 0 & k_4 = 0 & k_5 = 0 & k_6 = 1) ->
			(k_1' = 1) & (k_2' = 0) & (k_3' = 2) & (k_4' = 0) & (k_5' = 0) & (k_6' = 0);
	[step] (assigned & k_1 = 1 & k_2 = 0 & k_3 = 0 & k_4 = 0 & k_5 = 0 & k_6 = 2) ->
			(k_1' = 2) & (k_2' = 1) & (k_3' = 0) & (k_4' = 0) & (k_5' = 0) & (k_6' = 0);
	[step] (assigned & k_1 = 1 & k_2 = 0 & k_3 = 0 & k_4 = 0 & k_5 = 1 & k_6 = 1) ->
		((pr_fail_1_0 * pr_fail_1_0) + (pr_fail_1_1 * pr_fail_1_0)):
			(k_1' = 2) & (k_2' = 1) & (k_3' = 0) & (k_4' = 0) & (k_5' = 0) & (k_6' = 0) +
		((pr_fail_1_1)):
			(k_1' = 1) & (k_2' = 1) & (k_3' = 0) & (k_4' = 0) & (k_5' = 0) & (k_6' = 1);
	[step] (assigned & k_1 = 1 & k_2 = 0 & k_3 = 0 & k_4 = 1 & k_5 = 0 & k_6 = 1) ->
			(k_1' = 1) & (k_2' = 1) & (k_3' = 0) & (k_4' = 0) & (k_5' = 1) & (k_6' = 0);
	[step] (assigned & k_1 = 1 & k_2 = 0 & k_3 = 1 & k_4 = 0 & k_5 = 0 & k_6 = 1) ->
			(k_1' = 1) & (k_2' = 1) & (k_3' = 0) & (k_4' = 1) & (k_5' = 0) & (k_6' = 0);
	[step] (assigned & k_1 = 1 & k_2 = 1 & k_3 = 0 & k_4 = 0 & k_5 = 0 & k_6 = 1) ->
			(k_1' = 1) & (k_2' = 1) & (k_3' = 1) & (k_4' = 0) & (k_5' = 0) & (k_6' = 0);
	[step] (assigned & k_1 = 2 & k_2 = 0 & k_3 = 0 & k_4 = 0 & k_5 = 0 & k_6 = 1) ->
			(k_1' = 1) & (k_2' = 2) & (k_3' = 0) & (k_4' = 0) & (k_5' = 0) & (k_6' = 0);
endmodule
